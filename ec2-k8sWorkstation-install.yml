#Ec2 instance launch and install kubernetes required applications (aws cli,kubectl and kops).
#install prerequisites pip, ansible, boto3, botocore
#configure AWS Credentials using export 
#using add_host module we dynamically call created new instance and executes tasks
#once below tasks completed successfully then we call ec2 as K8s-workstation.
#To complete the kubernetes setup and create cluster, create an IAM user with access keys and administrator policy attachment (use can use playbook iam-user-kubernetes.yml in git repo) then do aws configure in K8workstation.
#create an aws s3 bucket using console and use it when creating cluster.


---
  - name: Launch EC2 Instance in Custom VPC
    hosts: localhost
    gather_facts: no



    tasks:
      - name: Launch an EC2 instance
        amazon.aws.ec2_instance:
          name: "k8s-workstation"
          key_name: Personal-laptop-keypair  # Replace with your key pair name
          instance_type: t2.medium
          security_group: sg-0dab50029ff3f2b5b  # Replace with your Security Group ID
          image_id: ami-0402e56c0a7afb78f  # Replace with a valid AMI ID
          region: ap-south-1
          vpc_subnet_id: subnet-03114d440064237d2  # Replace with your Subnet ID
          network:
            assign_public_ip: yes  # Set to yes if you want a public IP
          tags:
            Environment: Dev
            Owner: ansible
        register: ec2

      - name: Show Instance Details
        debug:
          var: ec2.instances

      - name: Wait for SSH to be ready
        wait_for:
          host: "{{ ec2.instances[0].public_ip_address }}"
          port: 22
          delay: 120
          timeout: 300
          state: started



      - name: Add instance to in-memory inventory
        add_host:
          name: "{{ ec2.instances[0].public_ip_address }}"
          groups: launched_ec2
          ansible_user: ec2-user
          ansible_ssh_private_key_file: /home/ec2-user/Personal-laptop-keypair.pem
          ansible_ssh_common_args: '-o StrictHostKeyChecking=no'


#install and run kubernetes workstation

  - name: install and run kubernetes workstation
    hosts: launched_ec2
    become: yes
    
      

    tasks:

      - name: unzip install
        yum:
          name: unzip
          state: present

      - name: Download AWS CLI installer
        get_url:
          url: "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
          dest: "/tmp/awscliv2.zip"

      - name: Unzip AWS CLI installer
        command: "unzip /tmp/awscliv2.zip -d /tmp/"

      - name: Install AWS CLI
        command: "sudo /tmp/aws/install"

      - name: Add Kubernetes repository
        copy:
          dest: "/etc/yum.repos.d/kubernetes.repo"
          content: |
            [kubernetes]
            name=Kubernetes
            baseurl=https://pkgs.k8s.io/core:/stable:/v1.32/rpm/
            enabled=1
            gpgcheck=1
            gpgkey=https://pkgs.k8s.io/core:/stable:/v1.32/rpm/repodata/repomd.xml.key
        become: yes

      - name: Install kubectl
        yum:
          name: kubectl
          state: present
        become: yes

      - name: Download latest kops binary
        shell: |
          curl -Lo kops https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
        args:
          chdir: /tmp

      - name: Make kops executable
        file:
          path: /tmp/kops
          mode: '0755'

      - name: Move kops binary to /usr/local/bin
        command: mv /tmp/kops /usr/local/bin/kops
        become: true

...









